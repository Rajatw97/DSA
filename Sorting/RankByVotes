Q>In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.
The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position
to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions,
we rank them alphabetically based on their team letter. You are given an array of strings votes which is the votes of all voters in the ranking systems.
Sort all teams according to the ranking system described above. Return a string of all teams sorted by the ranking system.

TC: O(26 + n * c + 26 * log 26 * c + c) = O(n)

class Solution {
    public String rankTeams(String[] votes) {
        if(votes.length==0 || votes==null)
            return " Invalid input!";
        int len = votes[0].length();
         if(len==1 || votes.length==1)
            return votes[0];
        int[][] map = new int[26][len + 1];
        for(int i = 0; i < 26; i++) map[i][len] = i;
        
        for(int i = 0; i < votes.length; i++){
            String s = votes[i];
            for(int j = 0; j < len; j++){
                map[s.charAt(j) - 'A'][j]++;
            }
        }
        Arrays.sort(map, (a, b) ->{
            for(int i = 0; i < len; i++){
                if(a[i] < b[i]) return 1;
                if(a[i] > b[i]) return -1;
            }
            return 0;
        });
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < len; i++){
            sb.append((char)('A' + map[i][len]));
        }
        return sb.toString();
    }
}

Variations:
1) No tie breaking needed ( naturally will print in lexographical order due to our row order)

 public static String rankTeams(String[] votes) {
        if(votes.length==0 || votes==null)
            return " Invalid input!";
        int len = votes[0].length();
         if(len==1 || votes.length==1)
            return votes[0];
        int[] count = new int[26];
        for(int i = 0; i < votes.length; i++){
            count[votes[i].charAt(0)-'A']++;
        }
        Character tempArray[] = new Character[votes[0].length()];
 
        for (int i = 0; i < votes[0].length(); i++) {
            tempArray[i] = votes[0].charAt(i);
        }
        Arrays.sort(tempArray, (a, b) ->{
            int index1= a-'A';
            int index2=b-'A';
            return count[index2]-count[index1];
        });
     StringBuilder sb = new StringBuilder();
        for(int i = 0; i < tempArray.length; i++){
            sb.append(tempArray[i]);
        }
        return sb.toString();
    }


Test cases: 
a) General:
1)Empty input:
Input: rankTeams(new String[]{});
Expected Output: ""

2) Single team:
Input: rankTeams(new String[]{"A"});
Expected Output: "A"

3) Multiple teams, single voter:
Input: rankTeams(new String[]{"ABCDEF"});
Expected Output: "ABCDEF"

b) Tie specific:

4) Multiple teams, multiple voters with ties:
Input: rankTeams(new String[]{"ABCDEF", "ACBEDF", "ADEBCF", "ADBCEF", "BACDEF"});
Expected Output: "ABCDEF"

5)Multiple teams, multiple voters with no ties:
Input: rankTeams(new String[]{"ACB","ABC"});
Expected Output: "ABC"

6) All Ties with lexographic order check
