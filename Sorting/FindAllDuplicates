Q. Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice.
   Return an array of all the integers that appears twice.
    
  Input: nums = [4,3,2,7,8,2,3,1]
  Output: [2,3]
  
  Approach: Range[1,n] : Cycle Sort

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        
        List<Integer> list=new ArrayList<>();
        int i=0;
        while(i<nums.length){
            int corr_index=nums[i]-1;
            if(nums[i]!=nums[corr_index])
                swap(nums,i,corr_index);
            else
                i++;
        }
        
        for(int j=0;j<nums.length;j++){
            if(nums[j]!=j+1)
                list.add(nums[j]);
        }
        return list;
    }
     
    void swap(int[] nums, int firstIndex, int secondIndex){
        
        int temp=nums[secondIndex];
        nums[secondIndex]=nums[firstIndex];
        nums[firstIndex]=temp;
    }
}

        
        
