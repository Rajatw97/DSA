Q. Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Pattern: As range is [1,n] , so apply cyclic sort.



class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> list=new ArrayList<>();
        int i=0;
        while(i<nums.length){
            int corr_index=nums[i]-1;
            if(nums[i]!=nums[corr_index])
                swap(nums,i,corr_index);
            else
                i++;
        }
        
        for(int j=0;j<nums.length;j++){
            if(nums[j]-1!=j)
                list.add(j+1);
        }
        
        return list;
    }
    
    void swap(int[] nums, int firstIndex, int secondIndex){
        int temp=nums[secondIndex];
        nums[secondIndex]=nums[firstIndex];
        nums[firstIndex]=temp;
    }
}
