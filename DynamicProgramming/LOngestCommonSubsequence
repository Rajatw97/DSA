Q. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Approach: If both char matches then add 1 and exclude both char else either exclude form s1 or s2 and return max of the two.

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
       
        int[][] dp= new int[text1.length()+1][text2.length()+1];
        
        for(int i=0;i<=text1.length();i++)
        {
            for(int j=0;j<=text2.length();j++){
                
                if(i==0 || j==0)
                    dp[i][j]=0;
                else if(text1.charAt(i-1) == (text2.charAt(j-1)))
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
        
        return dp[text1.length()][text2.length()];
    }
}

SImilar Question: Minimum Cost to make 2 Strings identical.
In that just find lcs and then calculate cost : (l1-lcs)*c1 + (l2-lcs)*c2
