Q. Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Input: nums = [1,5,11,5]
Output: true

Approach: Apply 0/1 Knapsack with minor variations

class Solution {
    public boolean canPartition(int[] nums) {
        
        int sum=0;
        
        for(int i=0;i<nums.length;i++)
            sum+=nums[i];
        if(sum%2!=0)
            return false;
        
       boolean[][] dp = new boolean[nums.length+1][sum/2+1];
        
        for(int i=0;i<=nums.length;i++){
            for(int j=0;j <= sum/2;j++){
                
                if( j==0)
                    dp[i][j]=true;
                
                else if(i==0)
                    dp[i][j]=false;
                
                else if(nums[i-1]>j)
                    dp[i][j]=dp[i-1][j];
                
                else
                dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];
                    
                
            }
        }
        
        return dp[nums.length] [sum/2];
        
    }
}
