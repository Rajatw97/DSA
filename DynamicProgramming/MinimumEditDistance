Q. Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Approach: if chars do not match : min ( Insert: column-1 , Delete: row-1 , Substitute : row-1 column -1)  + 1 (operation)
          if chars match: row-1 column-1

class Solution {
    public int minDistance(String word1, String word2) {
        
        int[][] dp=new int [word1.length()+1][word2.length()+1];
        
        for(int i=0;i<=word1.length();i++){
            for(int j=0;j<=word2.length();j++){
                
                if(j==0)
                    dp[i][j]=i;
                else if(i==0)
                    dp[i][j]=j;
                else if(word1.charAt(i-1)==word2.charAt(j-1))
                    dp[i][j]= dp[i-1][j-1];
                else
                    dp[i][j]=1+Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                    
            }
        }
        
        return dp[word1.length()][word2.length()];
    }
}
