 Q> here are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time.
    Count the number of ways, the person can reach the top.
    
    n = 4
    Output: 5
 
 
 int countWays(int n)
    {
        int[] dp=new int[n+1];
        
        dp[0]=1;
        dp[1]=1;
        
        for(int i=2;i<=n;i++){
            dp[i]=(int)((dp[i-1]+dp[i-2])%(Math.pow(10,9)+7));
        }
        return dp[n];
       
    }
    
 Variation: How to count the number of ways if the person can climb up to m stairs for a given value m.
 For example, if m is 4, the person can climb 1 stair or 2 stairs or 3 stairs or 4 stairs at a time.

 class Solution {
    public int climbStairs(int n,int m) {
       
        int[] dp=new int[n+1];
        
        dp[0]=1;
        
        for(int i=1;i<=n;i++){
           int total=0;
           for(int j=1;j<=m ;j++){
                if(i-j>=0)
                    total+=dp[i-j];
            }
            dp[i]=total;
        }
        return dp[n];
    }
}
