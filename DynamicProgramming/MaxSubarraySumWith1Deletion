Q>Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words,
you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining
elements is maximum possible.
Input: arr = [1,-2,0,3]
Output: 4
TC:O(n)
class Solution {
    public int maximumSum(int[] arr) {
        int n=arr.length;
        int[][] dp=new int[n][2];
        
        //0 signifies Havent deleted yet
        dp[0][0]=arr[0];
         // 1 signifies Have deleted 
        dp[0][1]= 0;
        int ans=arr[0];
        for(int i=1;i<n;i++){
            dp[i][0]=Math.max(arr[i],arr[i]+dp[i-1][0]);
            dp[i][1]=Math.max(dp[i-1][0],arr[i]+dp[i-1][1]);
            ans=Math.max(ans,Math.max(dp[i][0],dp[i][1]));
        }
        return ans;
    }
}
