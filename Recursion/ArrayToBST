Q. Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Approach: In BST, all elements in left are smaller than root and similarly all elements to right are greater. As array is sorted middle element will be your root and just do recursive call to left & right. 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public TreeNode sortedArrayToBST(int[] nums) {
        return recursiveBst(nums,0,nums.length-1);
    }
    
    public TreeNode recursiveBst(int[] nums, int low, int high){
        if(low>high){
            return null;
        }
        int mid=(low+high)/2; 
        TreeNode root=new TreeNode(nums[mid]);
        root.left=recursiveBst(nums,low,mid-1);
        root.right=recursiveBst(nums,mid+1,high);
        return root;
    }
        
    
}
