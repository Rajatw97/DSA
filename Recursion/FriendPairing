Q.  Given n friends, each one can remain single or can be paired up with some other friend. 
    Each friend can be paired only once. Find out the total number of ways in which friends can remain single or can be paired up. 
    
    Input  : n = 3
    Output : 4
   
   Approach: f(n) = f(n – 1) + (n – 1) * f(n – 2)
   
   Time & Space Complexity: O(n)
   
   class Solution {
   
    static int[] dp = new int[1001];
    
    static int countFriendsPairings(int n)
    {
        if (dp[n] != -1)
            return dp[n];
        if (n > 2)
            return dp[n] = countFriendsPairings(n - 1) + (n - 1) * countFriendsPairings(n - 2);
        else
            return dp[n] = n;
    }

}

Efficient solution: Problem is similar to Fibonacci number, so can be solved iteratively as well

class Solution {
 
    static int countFriendsPairings(int n)
    {
        int a = 1, b = 2, c = 0;
        if (n <= 2) {
            return n;
        }
        for (int i = 3; i <= n; i++) {
            c = b + (i - 1) * a;
            a = b;
            b = c;
        }
        return c;
    }
 

