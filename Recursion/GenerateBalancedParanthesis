Q. Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

class Solution {
    
    List<String> list=new ArrayList<>();
    public List<String> generateParenthesis(int n) {
        
        int open=n,close=n;
        solve(open,close,"");
        return list;       
    }
    
    void solve(int open, int close, String curr){
        
        if(open==0 && close==0){
            list.add(curr);
            return;
        }
            if(open!=0)
                solve(open-1,close,curr+'(');    
        
            if(close!=0 && close!=open)
                solve(open,close-1,curr+')');                         
    }
}
