Q. Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

class Solution {
    public List<String> letterCombinations(String digits) {
        
        if(digits.isEmpty())
            return new ArrayList<String>();
        return helper("",digits);
    }
    
    List<String> helper(String p, String up){
        
        if(up.isEmpty())
        {
            List<String> list=new ArrayList<>();
            list.add(p);
            return list;
        }
       
        int digit= up.charAt(0)-'0';
        List<String> ans=new ArrayList<>();
        int start=(digit-2)*3;
        int end=(digit-1)*3;
        if( digit>7)
         {
            start+=1;
            end+=digit-7;   
         }
        if(digit==7)
            end+=1;  
        for(int i=start;i<end;i++){
            char ch= (char)('a'+i);
            ans.addAll(helper(p+ch,up.substring(1)));
        }
        return ans;
    }
}
