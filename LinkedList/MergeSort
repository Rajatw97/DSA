Q. Given the head of a linked list, return the list after sorting it in ascending order.

 Input: head = [4,2,1,3]
 Output: [1,2,3,4]

class Solution {
    public ListNode sortList(ListNode head) {
        
        if(head==null || head.next==null)
            return head;
        
        ListNode mid= middleNode(head);
        ListNode left=sortList(head);
        ListNode right=sortList(mid);
        
        return mergeTwoLists(left, right);
        
        
    }
    
     public ListNode middleNode(ListNode head) {
        
        ListNode slow=null;
               
        while(head!=null && head.next!=null){
            slow= (slow==null)?head:slow.next;
            head=head.next.next;
        }
        
        ListNode mid= slow.next;
        slow.next=null;
        return mid;
            
    }
    
    
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        ListNode dummyHead=new ListNode();
        ListNode tail=dummyHead;        
        
        while(list1!=null && list2!=null){
            
            if(list1.val<list2.val){
                tail.next=list1;
                list1=list1.next;
                tail=tail.next;
            }
            else
            {   tail.next=list2;
                list2=list2.next;
                tail=tail.next;
            }
           
        }
        
        tail.next=(list1 != null) ? list1: list2;
        return dummyHead.next;
        }
}
