Q. You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

1. With just one head pointer

class Solution {
    
         public ListNode reverse(ListNode node)
    {
        ListNode prev = null;
        ListNode current = node;
        ListNode next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
         }
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int sum=0;
        int carry=0;
        ListNode l3=new ListNode();
       
        while(l1!=null || l2!=null){
           
             int p=( l1!=null )?l1.val:0;
             int q=( l2!=null )?l2.val:0;
            
            sum=(p+q+carry);
            carry=sum/10;
            l3.next=new ListNode(sum%10,l3.next);
            
            if(l1!=null){l1=l1.next;}
            if(l2!=null){l2=l2.next;}
    }
        if(carry==1){
            l3.next=new ListNode(1,l3.next); 
        }
           return reverse(l3.next);
        
    }
}

2. With head and tail pointers

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode head=new ListNode(0);
        ListNode tail=head;
        int carry=0,sum=0;
        while(l1!=null || l2!=null){
            
            int data1= l1==null?0:l1.val;
            int data2=l2==null?0:l2.val;
            
            sum= data1+data2+carry;
            carry=sum/10;
            tail.next=new ListNode(sum%10);
            tail=tail.next;
            
            if(l1!=null)
                l1=l1.next;
            if(l2!=null)
                l2=l2.next;
        }
        
        if(carry!=0)
            tail.next=new ListNode(carry);
        return head.next;
        
    }
}
