Q. Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.(Variation of basic k node reverse , use flag to decide to reverse or not)


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
      ListNode curr=head,prev=null,nextNode=null;
        int count=0;
        while(count<k && curr!=null){
            nextNode=curr.next;
            curr.next=prev;
            prev=curr;
            curr=nextNode;
            count++;
        }
        
        if(nextNode!=null){
            boolean flag=false;
            ListNode counter=nextNode;
            int countrest=0;
            while(counter!=null){      
                countrest ++;
                if(countrest==k){
                  flag=true;
                  break; 
                }
                counter=counter.next;   
            }
            if(flag){
            ListNode rest_head=reverseKGroup(nextNode,k);
            head.next=rest_head;
            }
            else{
                head.next=nextNode;
            }
        }
        
        return prev;    

    }
}
