Q.Given a linked list of 0s, 1s and 2s, sort it.
Input  : 2->1->2->1->1->2->0->1->0
Output : 0->0->1->1->1->1->2->2->2

Time complexity: O(n)

public class Sort012 {
 
    class Node
    {
      int data;
      Node next;
      Node(int data)
      {
          this.data=data;
      }
    }
    public static Node sortList(Node head)
    {
        if(head==null || head.next==null)
            return head;
       
        Node zeroD = new Node(0);
        Node oneD = new Node(0);
        Node twoD = new Node(0);
        Node zero = zeroD, one = oneD, two = twoD;
        Node curr = head;
        
        while (curr!=null)
        {
            if (curr.data == 0)
            {
                zero.next = curr;
                zero = zero.next;
                curr = curr.next;
            }
            else if (curr.data == 1)
            {
                one.next = curr;
                one = one.next;
                curr = curr.next;
            }
            else
            {
                two.next = curr;
                two = two.next;
                curr = curr.next;
            }
        }
        zero.next = (oneD.next!=null)? (oneD.next) : (twoD.next);
        one.next = twoD.next;
        two.next = null;
        return zeroD.next;
    }

    public static void main(String args[]) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(0);
        head.next.next.next = new Node(1);
    }
}
 
