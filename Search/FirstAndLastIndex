Q. Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
   If target is not found in the array, return [-1, -1].

Solution 1:

class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        return new int[]{firstIndex(nums,target),lastIndex(nums,target)};
    }
    
    int firstIndex(int[] nums,int target){
        
        int start=0,end=nums.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            
            if(nums[mid]== target && (mid==0 || nums[mid-1]!=nums[mid]))
                return mid;
            
            else if(nums[mid]>=target)
                end--;
            else
                start++;
            
        }
        return -1;
    }
    
    
    int lastIndex(int[] nums, int target){
        
        int start=0,end=nums.length-1;
        while(start<=end){
            int mid=(start+end)/2;
            
            if(nums[mid]== target && (mid==nums.length-1 || nums[mid+1]!=nums[mid]))
                return mid;
            
            else if(nums[mid]>target)
                end--;
            else
                start++;
            
        }
        return -1;
    }

}

Solution 2:

class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        return new int[]{searchIndex(nums,target,true),searchIndex(nums,target,false)};
    }
    
    int searchIndex(int[] nums,int target,boolean isFirstIndex){
        int res=-1;
        int start=0,end=nums.length-1;
        while(start<=end){
            int mid=(start+end)/2;
          
            if(target<nums[mid])
                end=mid-1;
            else if(target>nums[mid])
                start=mid+1;
            else{
                res=mid;
                if(isFirstIndex)
                    end=mid-1;
                else
                    start=mid+1;
            }
            
            
        }
        return res;
    }
    
}
