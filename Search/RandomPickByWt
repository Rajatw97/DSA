Q> You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.
You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. 
The probability of picking an index i is w[i] / sum(w).
For example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 
is 3 / (1 + 3) = 0.75 (i.e., 75%).

class Solution {
    int[] w_cum;
    int sum;
    public Solution(int[] w) {
        sum=0;
        w_cum=new int[w_cum.length];
        for(int i=0;i<w_cum.length;i++) {
          sum+=w[i];
          w_cum[i]=sum;
          
        }
    }
    
    public int pickIndex() {
        int indx= (int)(Math.random()*sum);
        return binSearch(index+1);
    }
    
    private int binSearch(int value) {
      int left=0;
      int right=w_cum.length-1;
      while(left<right) {
        int mid= (left+right)/2;
        if(w_cum[mid]< val)
          left=mid+1;
        else
          right=mid;
      }
      return left;
    }
}
