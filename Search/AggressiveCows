Q>Problem Statement: There is a new barn with N stalls and C cows. The stalls are located on a straight line at positions x1,â€¦.,xN (0 <= xi <= 1,000,000,000).
We want to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?

Time Complexity: O(N*log(M)). 
Reason: For binary search in a space of M, O(log(M))  and for each search, we iterate over max N stalls to check. O(N).
Space Complexity: O(1)

import java.util.*;
class TUF {
    static boolean isPossible(int a[], int n, int cows, int minDist) {
        int cntCows = 1;
        int lastPlacedCow = a[0];
        for (int i = 1; i < n; i++) {
            if (a[i] - lastPlacedCow >= minDist) {
                cntCows++;
                lastPlacedCow = a[i];
            }
        }
        if (cntCows >= cows) return true;
        return false;
    }
    public static void main(String args[]) {
        int n = 5, cows = 3;
        int a[]={1,2,8,4,9};
        Arrays.sort(a);

        int low = 1, high = a[n - 1] - a[0];

        while (low <= high) {
            int mid = (low + high) >> 1;

            if (isPossible(a, n, cows, mid)) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        System.out.println("The largest minimum distance is " + high);


    }
}

 Variation : If distance is given, then the below code can be used to check the possibility:
 
 
 public boolean isPossible(int[] spaces, int d, int k) {
    Arrays.sort(spaces); // Step 1: Sort the array of available spaces
    int lastOccupied = Integer.MIN_VALUE; // Step 2: Initialize last occupied space

    for (int i = 0; i < spaces.length; i++) {
        int currentSpace = spaces[i];
        int absoluteDiff = Math.abs(currentSpace - lastOccupied); // Step 3: Calculate absolute difference

        if (absoluteDiff < d) {
            return false; // Step 4: Return false if vendors are too close
        } else {
            lastOccupied = currentSpace; // Step 5: Update last occupied space
        }
    }

    return true; // Step 7: Return true if all vendors can set up shops without conflicts
}
