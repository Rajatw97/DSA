Q> Given a matrix and a target, return the number of non-empty submatrices that sum to target.
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
TC:(O(n*m^2)

class Solution {
    public int numSubmatrixSumTarget(int[][] matrix, int target) {
        int n=matrix.length,m=matrix[0].length;
        
        for(int i=0;i<n;i++){
            for(int j=1;j<m;j++){
                matrix[i][j]+=matrix[i][j-1];
            }
        }
       
        int prefixSum=0,count=0;
        Map<Integer,Integer> hm;
        for(int c1=0;c1<m;c1++){ 
            for(int c2=c1;c2<m;c2++){
             prefixSum=0;
             hm=new HashMap<>();
            for(int i=0;i<n;i++){
                prefixSum+=matrix[i][c2]-(c1>0?matrix[i][c1-1]:0);

                if(prefixSum==target)
                    count++;

                if(hm.containsKey(prefixSum-target))
                      count += hm.get(prefixSum - target);

                 hm.put(prefixSum, hm.getOrDefault(prefixSum,0)+1);
             }
           }
        }
        return count;
    }
}
