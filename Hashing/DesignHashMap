Q. Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.


Approach: Difference between both appraoch is tradeoff between Space and Time complexity.

1. Using ArrayList(Dunamic size):

class MyHashMap {    
    List<List<Integer>> map;
    /** Initialize your data structure here. */
    public MyHashMap() {
        map=new ArrayList<List<Integer>>();
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {

       remove(key);
       map.add(new ArrayList<Integer>(Arrays.asList(key,value)));
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        
          for(List<Integer> list: map)
          {  
              if(list.get(0) == key)
                return list.get(1);
          }    
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        
          for(List<Integer> list: map)
          { 
              if(list.get(0) == key)
              { map.remove(list);
                return; 
              }
          }
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
 
 
 2. Using Array(Static)
 
 class MyHashMap {

    int a[] = new int[1000010];
    public MyHashMap() {
        
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        a[key]=value+1;
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        return a[key]-1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        a[key]=0;
    }
}
