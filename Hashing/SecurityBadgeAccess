Q> We are working on a security system for a badged-access room in our company's building.
We want to find employees who badged into our secured room unusually often. We have an unordered list of names and entry times over a single day. 
Access times are given as numbers up to four digits in length using 24-hour time, such as "800" or "2250".
Write a function that finds anyone who badged into the room three or more times in a one-hour period. Your function should return each of the employees who 
fit that criteria, plus the times that they badged in during the one-hour period. If there are multiple one-hour periods where this was true for an employee, 
just return the earliest one for that employee.
badge_times = [
["Paul", "1355"], ["Jennifer", "1910"], ["Jose", "835"],
["Jose", "830"], ["Paul", "1315"], ["Chloe", "0"],
["Chloe", "1910"], ["Jose", "1615"], ["Jose", "1640"],
["Paul", "1405"], ["Jose", "855"], ["Jose", "930"],
["Jose", "915"], ["Jose", "730"], ["Jose", "940"],
["Jennifer", "1335"], ["Jennifer", "730"], ["Jose", "1630"],
["Jennifer", "5"], ["Chloe", "1909"], ["Zhang", "1"],
["Zhang", "10"], ["Zhang", "109"], ["Zhang", "110"],
["Amos", "1"], ["Amos", "2"], ["Amos", "400"],
["Amos", "500"], ["Amos", "503"], ["Amos", "504"],
["Amos", "601"], ["Amos", "602"], ["Paul", "1416"],
];
Expected output (in any order)
Paul: 1315 1355 1405. // 1315-1415
Jose: 830 835 855 915 930
Zhang: 10 109 110
Amos: 500 503 504

class Main {
public static void main(String[] args) {
  findEmployee(badgeTimes);
}
 static void findEmployee(String[][] badge_times) {
	Map<String, List<Integer>> map = new HashMap<>();

	for (String[] bt : badge_times) {
		String user = bt[0];
		Integer time = Integer.valueOf(bt[1]);
		map.put(user, map.getOrDefault(user, new ArrayList<>()));
		map.get(user).add(time);
	}

	Map<String, List<Integer>> res = new HashMap<>();
	for (String emp : map.keySet()) {
		List<Integer> timestamp = map.get(emp);
		Collections.sort(timestamp);

		int start = 0;
		int end = 0;
		for (int i = 0; i < timestamp.size(); i++) {
			// till current time lt eq to start, keep on incrementing end
			// here i am comparing one-hr with 100, because time in 24 hr with string
			// representaion
			// 0 -> 00:00, 210 -> 02:10, 259 -> 02:59, 300 -> 03:00 // so effectively 1 hr
			// can be equivalent to 100
			if (timestamp.get(i) - timestamp.get(start) <= 100)
				end = i;
			else if (end - start + 1 >= 3) // if we met the condition, we only need to show first occurrence so we
											// can break the loop
				break;
			else {
				start++; // increment window
				i--; // this step is done to start from window where all previous condition fails and
						// start current window from this element
				// for ex [0, 1909, 1910] -> start = 0, i = 1, condition fails now start = 1 and
				// i=1, if we don;t decrement i, then for false condition, that element will be
				// missed
			}
		}

		if (end - start + 1 >= 3) {
			res.put(emp, new ArrayList<>());
			for (int i = start; i <= end; i++) {
				res.get(emp).add(timestamp.get(i));
			}
		}

	}

	System.out.println(res.toString());
 }
}
