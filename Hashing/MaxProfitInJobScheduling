
Q> We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].
    You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two
    jobs in the subset with overlapping time range.
    
    Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
    Output: 120

class Solution {
    
    class Job{
        
        int startTime;
        int endTime;
        int profit;
        
        Job(int start,int end, int profit){
            this.startTime=start;
            this.endTime=end;
            this.profit=profit;
        }
    }
    
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
        List<Job> list=new ArrayList<>();
        
        for(int i=0;i<startTime.length;i++){
            list.add(new Job(startTime[i], endTime[i], profit[i]));    
        }
        
        Collections.sort(list,(a,b)->a.endTime-b.endTime);
        TreeMap<Integer,Integer> map=new TreeMap<>();
        int ans=0;
        for(Job job:list){
           Integer start= map.floorKey(job.startTime);
           int currprofit=start==null?0:map.get(start);
            ans=Math.max(ans, job.profit+currprofit);
            map.put(job.endTime, ans);
        }
        return ans;
    }
}
