Q. Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]


class Solution {
     public List<List<Integer>> allPathsSourceTarget(int[][] graph) {

        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        path.add(0);
        dfs(graph, 0, ans, path);
        return ans;

    }


    private void dfs(int[][] graph, int node, List<List<Integer>> ans, List<Integer> path) {


        if (node == graph.length - 1) {
            ans.add(new ArrayList<>(path));
            return;
        }


        for (int j : graph[node]) {
            path.add(j);
            dfs(graph, j, ans, path);
            path.remove(path.size()-1);
        }

    }
}
