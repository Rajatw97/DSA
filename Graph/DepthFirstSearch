For a graph with N nodes and E edges:
 Time Complexity: O(N+E)
 Space Complexity:O(N+E) +O(N) +O(n) in case of Adj list(visited array+ Aux space)
                  O(N2) in case of Adj Matrix
 

class Solution{

 public static void main (String[] args) {

        Scanner scan= new Scanner(System.in);
        System.out.println("Enter no of vertices and edges");
        int V= scan.nextInt();
        int E=scan.nextInt();
        int[][] edge=new int[V][V];
        System.out.println("edges:"+E +", V:"+V);
        System.out.println("Enter the edges");
        for(int i=0;i<E;i++){
            int firstVertex= scan.nextInt();
            int secondVertex=scan.nextInt();
            edge[firstVertex][secondVertex]=1;
            edge[secondVertex][firstVertex]=1;
        }
        System.out.println("Dfs: ");
        dfsAdjMatrix(edge,new boolean[V],V,0);
    }
    
     void dfsAdjMatrix(int[][] edge,boolean[] visited,int V, int start){
            System.out.print(start+ " ");
            visited[start]=true;
            for(int i=0;i<V;i++){
                if(edge[start][i]==1 && !visited[i])
                    dfsAdjMatrix(edge,visited,V,i);
            }
        }
}

For Disconnected Graphs: Call disconnectedComponents inside main rather than calling dfs directly.

  void disconnectedComponents(int[][] edge,boolean[] visited, int V, int start){

        for(int i=0;i<V;i++){
            if(!visited[i]) 
                dfsAdjMatrix(edge, visited, V, i);          
            }
    }
