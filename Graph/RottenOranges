Q. You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1


class Solution {
    public int orangesRotting(int[][] grid) {
        
        int row=grid.length;
        int col=grid[0].length;
        int countOranges=0;
        Queue<int[]> q=new LinkedList<>();
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==2)
                    q.add(new int[]{i,j});
                if(grid[i][j]!=0)
                    countOranges++;
            }
        }
        int minutes=0,count=0;
        int dx[]=new int[]{1,-1,0,0};
        int dy[]=new int[]{0,0,1,-1};
        while(!q.isEmpty()){
           
            int size=q.size();
            count+=size;
            while(size-- >0){
                int[] curr=q.poll();
                for(int i=0;i<dx.length;i++){
                    int x=curr[0]+dx[i];
                    int y=curr[1]+dy[i];
                    
                    if(x<0 || y<0 || x>=row ||y>=col ||grid[x][y]==0 || grid[x][y]==2)
                        continue;
                    grid[x][y]=2;
                    q.add(new int[]{x,y});
                }
            }
            if(q.size()!=0)
                minutes++;
        }
       
        return count==countOranges? minutes:-1;
    }
}
