Q> You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. 
Reconstruct the itinerary in order and return it.
For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].

Input: tickets = [["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
Output: ["JFK","MUC","LHR","SFO","SJC"]


class Solution {
    
    Map<String,PriorityQueue<String>> hm;
    LinkedList<String> result;
    public List<String> findItinerary(List<List<String>> tickets) {
        result=new LinkedList<>();
        hm=new HashMap<>();
        
        for(List<String> ticket: tickets){
            PriorityQueue<String> temp=hm.getOrDefault(ticket.get(0),new PriorityQueue<>());
            temp.add(ticket.get(1));
            hm.put(ticket.get(0),temp);
        }
        dfs("JFK");
        return result;
    }   
     void dfs(String curr){
        
        PriorityQueue<String> nbrs=hm.get(curr);
        while(nbrs!=null && nbrs.size()>0){
            String popped=nbrs.remove();
            dfs(popped);
        }
        result.addFirst(curr);
             
     }
    
}
