Q> Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.
   A region is captured by flipping all 'O's into 'X's in that surrounded region.
   
   Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
  Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]

class Solution {
    public void solve(char[][] board) {
        
        for(int i=0;i<board[0].length;i++){
            dfs(board, 0, i);
            dfs(board, board.length-1, i);
        }
        
        for(int j=0;j<board.length;j++){
            dfs(board, j,0);
            dfs(board,j,board[0].length-1);
        }
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='O')
                        board[i][j]='X';
                else if(board[i][j]=='P')
                    board[i][j]='O';
            }
        }
    }
        
        void dfs(char[][] board,int i, int j){
                         
        if(board[i][j] == 'O'){
        
            board[i][j] = 'P';

            if(i+1 < board.length)
                dfs(board, i+1, j);
            if(i > 1)
                dfs(board, i-1, j);
            if(j+1 < board[i].length)
                dfs(board, i, j+1);
            if(j > 1)
                dfs(board, i, j-1);
            }
        }
    
}
