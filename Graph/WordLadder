Q> A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:
    Every adjacent pair of words differs by a single letter.
    Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
    sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord,
or 0 if no such sequence exists.

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
    Set<String> set = new HashSet<>(wordList);
    Queue<String> q = new LinkedList<>();
    q.offer(beginWord);
    int step = 1;
    while (!q.isEmpty()) {
        int size = q.size();
        for (int j = 0; j < size; j++) {
            String cur = q.poll();
            for (int i = 0; i < endWord.length(); i++) {
                for (char letter = 'a'; letter <= 'z'; letter++) {
                    StringBuilder newWord = new StringBuilder(cur);
                    newWord.setCharAt(i, letter);
                    if (set.contains(newWord.toString())) {
                        if (newWord.toString().equals(endWord)) return step + 1;
                        set.remove(newWord.toString());
                        q.offer(newWord.toString());
                    }
                }
            }
            
        }
        step++;
    }
    return 0;

    }
}
