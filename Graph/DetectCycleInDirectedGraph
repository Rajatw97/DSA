Q. Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.

For a graph with N nodes and E edges:
 Time Complexity: O(N+E)
 Space Complexity:O(N+E) +O(N) +O(n) in case of Adj list(visited array+ queue)
                  O(N2) in case of Adj Matrix
 For a graph with N nodes and E edges:
 Time Complexity: O(N+E)
 Space Complexity:O(N+E) +O(2N) +O(N) in case of Adj list(2visited array+ aux space)
                  O(N2) in case of Adj Matrix
 


    class DriverClass {
     public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for (int i = 0; i < V + 1; i++)
                list.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if (new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else
                System.out.println("0");
        }
    }
        
class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        // code here
        boolean[] visited=new boolean[V];
        boolean[] dfsvis=new boolean[V];
        for(int i=0;i<V;i++){
            
            if(!visited[i])
                if(hasCycle(i,adj,visited,dfsvis))
                    return true;
        }
        
        return false;
    }
    
     boolean hasCycle(int start, ArrayList<ArrayList<Integer>> adj,  boolean[] visited, boolean[] dfsvis) {
         
         visited[start]=true;
         dfsvis[start]=true;
         
         for(Integer itr: adj.get(start)){
             
             if(!visited[itr])
                { 
                    if(hasCycle(itr,adj,visited,dfsvis))
                        return true;
                }
             else if(dfsvis[itr])
                return true;
         }
         dfsvis[start]=false;
         return false;
     }
}
