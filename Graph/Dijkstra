Dijkstra algo is used for finding shortest distance between 2 nodes

I/P: 
Enter no of vertices and edges
5 7
0 1 4
0 2 8
1 2 2
2 3 5
1 3 5
2 4 9
4 3 4

O/P Format- V: Min. Distance
0:0
1:4
2:6
3:9
4:13


public class Dijkstra {

    void input(int V, int E){
        Scanner scan=new Scanner(System.in);
        int[][] edges=new int[V][V];

        for(int i=0;i<E;i++){
            int firstV= scan.nextInt();
            int lastV=scan.nextInt();
            int weight=scan.nextInt();
            edges[firstV][lastV]=weight;
            edges[lastV][firstV]=weight;
        }
        dijkstraAlgo(edges,V);
    }

    void dijkstraAlgo(int[][] edges,int V){

        boolean[] visited=new boolean[V];
        int[] dist=new int[V];

        for(int i=0;i<V;i++){
            dist[i]=Integer.MAX_VALUE;
            visited[i]=false;
        }
        dist[0]=0;

        for(int i=0;i<V-1;i++){
           int minV= minVertex(dist,visited,V);
           visited[minV]=true;
           for(int j=0;j<V;j++){
               if(edges[minV][j]!=0 && !visited[j]){
                   int distance=dist[minV]+edges[minV][j];
                   dist[j]=Math.min(distance,dist[j]);
               }
           }
        }
        for(int i=0;i<V;i++)
            System.out.println(i+":"+dist[i]);

    }

    int minVertex(int[] dist, boolean[] visited, int V){
        int minV=-1;
        for(int i=0;i<V;i++){
            if(!visited[i] && (minV==-1 || dist[i]<dist[minV]))
                minV=i;
        }
        return minV;
    }
}

Question 2: Find shortest distance in Undirected Graph with unit weights.
 Approach: Use BFS with slight modifications
 
 private void shortestPath(ArrayList<ArrayList<Integer>> adj,int N,int src) 
	{
		int[] dist = new int[N]; 
    	for(int i = 0; i < N; i++) 
    		dist[i] = 10000000; 
    
    	Queue<Integer> q=new LinkedList<>();    	
    	dist[src] = 0;
    	q.add(src); 
    
    	while(q.isEmpty()==false) 
    	{ 
    		int node = q.poll();  
    		for(int it:adj.get(u)){
    		    if(dist[node] + 1 < dist[it]){
    		        dist[it] = dist[node] + 1;
    		        q.add(it);
    		    }
    		} 
    	}
    	for(int i = 0;i < N;i++) {
    	    System.out.print(dist[i] + " "); 
    	}
	} 
 
 

