Q> You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the
equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.


class Solution {
    HashMap<String, ArrayList<Pair>> graph = new HashMap<>();
    public class Pair{
        String v;
        double w;
        Pair(String v, double w){
            this.v = v;
            this.w = w;
        }
        public String toString(){
            return v + " " + w;
        }
    }
    
    public double dfs(String src, String dest, HashSet<String> vis){
        vis.add(src);
        if(src.equals(dest)) return 1;
        double ans = 1;
        for(Pair e : graph.get(src)){
            if(!vis.contains(e.v)){
                double ret = dfs(e.v, dest, vis);
                if(ret > 0) return e.w * ret;
            }
        }
        return -1.0;
    }
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        double[] qAnswer = new double[queries.size()];
        for(int i = 0 ; i < equations.size() ; i++){
            String u = equations.get(i).get(0), v = equations.get(i).get(1);
            double w = values[i];
            graph.putIfAbsent(u, new ArrayList<>());
            graph.putIfAbsent(v, new ArrayList<>());
            graph.get(u).add(new Pair(v, w));
            graph.get(v).add(new Pair(u, 1/w));
        }
        
        for(int i = 0 ; i < queries.size() ; i++){
            String u = queries.get(i).get(0), v = queries.get(i).get(1);
            double q = graph.containsKey(u) ? dfs(u, v, new HashSet<>()) : -1.0;
            qAnswer[i] = q;
        }
        
        return qAnswer;
    }
}

Variation: 
Given an array of currency conversion rates. E.g. ['USD', 'GBP', 0.77] which means 1 USD is equal to 0.77 GBP
and an array containing a 'from' currency and a 'to' currency
Find the conversion rate that maps to the 'from' currency to the 'to' currency.

public class Main {
    public static void main(String[] args) {
        List<Node> data = new ArrayList<Node>();
        data.add(new Node("USD", "JPY", 110));
        data.add(new Node("USD", "AUD", 1.45));
        data.add(new Node("JPY", "GBP", 0.0070));
        System.out.println(getRatio("GBP", "AUD", data));
    }
    public static double getRatio(String start, String end, List<Node> data) {
        Map<String, Map<String, Double>> map = new HashMap();
        for (Node node: data) {
            if (!map.containsKey(node.start)) map.put(node.start, new HashMap());
            map.get(node.start).put(node.end, node.ratio);
            if (!map.containsKey(node.end)) map.put(node.end, new HashMap());
            map.get(node.end).put(node.start, 1.0/node.ratio);
        }
        Queue<String> q = new LinkedList();
        Queue<Double> val = new LinkedList();
        q.offer(start);
        val.offer(1.0);
        Set<String> visited = new HashSet();
        while(!q.isEmpty()) {
            String cur = q.poll();
            double num = val.poll();
            if (visited.contains(cur)) continue;
            visited.add(cur);
            if (map.containsKey(cur)) {
                Map<String, Double> next = map.get(cur);
                for (String key: next.keySet()) {
                    if (!visited.contains(key)) {
                        q.offer(key);
                        if (key.equals(end)) return num*next.get(key);
                        val.offer(num*next.get(key));
                    }
                }
            }
        }
        return -1;
    }

    static class Node {
        String start;
        String end;
        double ratio;
        public Node(String s, String e, double r) {
            this.start = s;
            this.end = e;
            this.ratio = r;
        }
    }
}
 
