Q> There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi]
indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them.
If it is impossible to finish all courses, return an empty array.

Approach: Topological sort
class Solution {
    static boolean flag=false;
    public int[] findOrder(int V, int[][] prerequisites) {
      
      ArrayList<ArrayList<Integer>> adj = new ArrayList();
        for(int i=0;i<V;i++) adj.add(new ArrayList());
        for(int[] e : prerequisites) adj.get(e[1]).add(e[0]);
       boolean[] visited=new boolean[V];
       boolean[] dfsvisited=new boolean[V];
       Stack<Integer> st = new Stack();
        for(int i=0;i<V;i++){
            if(!visited[i]){   
                if(dfstopo(i,adj,visited,st,dfsvisited))
                    return new int[0];               
           }
        }
        int[] topo = new int[V];
        int index=0;
        while(!st.isEmpty()){
            topo[index++]=st.pop();
        }
        return topo;
    }
    
        static boolean dfstopo(int start, ArrayList<ArrayList<Integer>> adj,boolean[] visited,Stack<Integer> st,boolean[] dfsvisited){
        
        visited[start]=true;
        dfsvisited[start]=true;
        for(Integer itr:adj.get(start)){
            
            if(!visited[itr])
            {  if(dfstopo(itr,adj,visited,st,dfsvisited)) return true; }
            else if(dfsvisited[itr])
                     return true;
          }
        dfsvisited[start]=false;
        st.push(start);
            return false;
    } 
}
