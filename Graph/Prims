I/P:
Enter no of vertices and edges
5 7
edges:7, V:5
Enter the edges and wt
0 1 4
0 2 8
1 2 2
1 3 6
2 4 9
2 3 3
4 3 5
O/p:
-1:0:0
0:1:4
1:2:2
2:3:3
3:4:5

public class Prims {

    void input(int V, int E){
        Scanner scan=new Scanner(System.in);
        int[][] edges=new int[V][V];

        for(int i=0;i<E;i++){
            int firstV= scan.nextInt();
            int lastV=scan.nextInt();
            int weight=scan.nextInt();
            edges[firstV][lastV]=weight;
            edges[lastV][firstV]=weight;
        }
        primsAlgo(edges,V);
    }

    void primsAlgo(int[][] edges,int V){

        boolean[] visited=new boolean[V];
        int[] parent=new int[V];
        int[] weight=new int[V];

        for(int i=0;i<V;i++){
            visited[i]=false;
            weight[i]=Integer.MAX_VALUE;
        }
        parent[0]=-1;
        weight[0]=0;

        for(int i=0;i<V;i++){
            int minV= minVertex(weight,visited, V);
            visited[minV]=true;
            for(int j=0;j<V;j++){
                if(edges[minV][j]!=0 &&!visited[j]){
                    if(edges[minV][j]<weight[j]){
                        weight[j]=edges[minV][j];
                        parent[j]=minV;
                    }
                }
            }
        }
        for(int i=0;i<V;i++)
            System.out.println(parent[i]+":"+i+":"+weight[i]);

    }

    int minVertex(int[] wt, boolean[] visited, int V){

        int minV = -1;
        for(int i=0;i<V;i++){
            if(!visited[i] && (minV== -1 || wt[i]<wt[minV]))
                minV=i;
        }
        return minV;
    }
}
