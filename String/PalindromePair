Q> Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.
Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
T:O(n* k2) where n=no of elem & k=length of string



class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        
        List<List<Integer>> result=new ArrayList<>();
        Map<String, Integer> map=new HashMap<>();
        
        for(int i=0;i<words.length;i++)
            map.put(words[i],i);
        
        //EMpty String case
        if(map.containsKey("")){
            int index=map.get("");
            for(int i=0;i<words.length;i++){
                if(i!=index && isPalindrome(words[i]))
                {
                    result.add(new ArrayList<>(Arrays.asList(i,index)));
                    result.add(new ArrayList<>(Arrays.asList(index,i)));
                }
            }
        }
        
        //Word and its reverse is present
        for(int i=0;i<words.length;i++){
            String reverseStr=new StringBuilder(words[i]).reverse().toString();
            if(map.containsKey(reverseStr)&& i!=map.get(reverseStr))
                 result.add(new ArrayList<>(Arrays.asList(i,map.get(reverseStr))));
        }
        
        for(int i=0;i<words.length;i++){
            for(int j=1;j<words[i].length();j++){
                
                String left=words[i].substring(0,j);
                String right=words[i].substring(j);
                
                if(isPalindrome(left)){
                      String reverseStr=new StringBuilder(right).reverse().toString();
                      if(map.containsKey(reverseStr))
                        result.add(new ArrayList<>(Arrays.asList(map.get(reverseStr),i)));
                }
                
                if(isPalindrome(right)){
                      String reverseStr=new StringBuilder(left).reverse().toString();
                      if(map.containsKey(reverseStr))
                        result.add(new ArrayList<>(Arrays.asList(i,map.get(reverseStr))));
                }
            }
        }
        
        return result;
        
    }
    
    boolean isPalindrome(String curr){
        int i=0, j=curr.length()-1;
        
        while(i<j){
            if(curr.charAt(i++)!=curr.charAt(j--))
                return false;
        }
        
        return true;
    }
}
