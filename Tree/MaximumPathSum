Q. Given the root of a binary tree, return the maximum path sum of any path.
Input: root = [-10,9,20,null,null,15,7]
Output: 42

class Solution {
    int result=Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        
        maxSumCalc(root);
        return result;
    }
    
    int maxSumCalc(TreeNode root){
        
        if(root==null)
            return 0;
        
        int left = maxSumCalc(root.left);
        int right=maxSumCalc(root.right);
        
        int currInPath= Math.max( Math.max(left,right) + root.val, root.val); // Case1: When curr node is in path of max sum
        int currAsRoot= Math.max( currInPath, left+right+root.val); // Case 2: When curr node is  root fo the path
        result=Math.max(result,currAsRoot); // Case 3: Curr nod eis not in path so just keep track of max till now
        return currInPath;
    }
}

Solution2: 

class Solution {
   public int maxPathSum(TreeNode root) {
        int maxValue[] = new int[1]; 
        maxValue[0] = Integer.MIN_VALUE;
        maxPathDown(root, maxValue);
        return maxValue[0];
    }
    
    private int maxPathDown(TreeNode node, int maxValue[]) {
        if (node == null) return 0;
        int left = Math.max(0, maxPathDown(node.left, maxValue));
        int right = Math.max(0, maxPathDown(node.right, maxValue));
        maxValue[0] = Math.max(maxValue[0], left + right + node.val);
        return Math.max(left, right) + node.val;
       
    }
}
