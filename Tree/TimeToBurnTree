 Q. Given a binary tree and a node called target. Find the minimum time required to burn the complete binary tree if the target is set on fire.
 It is known that in 1 second all nodes connected to a given node get burned.That is its left child, right child, and parent.


class Solution
{
 static Node res=null;
    public static int minTime(Node root, int target) 
    {
        HashMap<Node,Node> hm=new HashMap<>();
        Node targetNode = bfsToMapParents(root, hm, target);
      
         int maxi = findMaxDistance(hm, targetNode);
        return maxi;
    }
    
    
    private static Node bfsToMapParents(Node root, HashMap<Node,Node> hm, int target) {
        if(root==null)
            return null;
        
        bfsToMapParents(root.left,hm,target);
        if(root.data==target)
            res=root;
        bfsToMapParents(root.right,hm,target);
        if(root.left!=null)
            hm.put(root.left,root);
        if(root.right!=null)
            hm.put(root.right,root);
        
        return res;
    }
    private static int findMaxDistance(HashMap<Node, Node> mpp, Node target) {
        Queue<Node> q = new LinkedList<>();
        q.add(target);
        HashMap<Node,Integer> vis = new HashMap<>();
        vis.put(target, 1);
        int maxi = 0,fl=0;
        
        while(!q.isEmpty()) {
            fl=0;
            int size=q.size();
            for(int i=0;i<size;i++){
                Node node = q.poll();
                
                if(node.left != null && vis.get(node.left) == null) {
                    fl = 1;
                    vis.put(node.left, 1);
                    q.add(node.left);
                }
                if(node.right != null && vis.get(node.right) == null) {
                    fl = 1;
                    vis.put(node.right, 1);
                    q.add(node.right);
                }

                if(mpp.get(node) != null && vis.get(mpp.get(node)) == null) {
                    fl = 1;
                    vis.put(mpp.get(node), 1);
                    q.add(mpp.get(node));
                }
            }
                if(fl == 1) maxi++;
            }
             return maxi;
        }
       
}
