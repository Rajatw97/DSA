Q. Given a binary tree, determine if it is height-balanced.

Input: root = [3,9,20,null,null,15,7]
Output: true

class Solution {
    public boolean isBalanced(TreeNode root) {
     
        if(root==null)
            return true;
        
      return (Math.abs(height(root.left) - height(root.right))<=1) && isBalanced(root.left) && isBalanced(root.right);
    }
    
    int height(TreeNode root){
        
        if(root==null)
            return 0;
        
        return 1+Math.max(height(root.left),height(root.right));
    }
    
  
}

Efficient:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    boolean isBal=true;
    
    public boolean isBalanced(TreeNode root) {
        
        helper(root);
        return isBal;
    }
    
    int helper(TreeNode root){
        
        if(root==null)
            return 0;
        
        int lh=helper(root.left);
        int rh=helper(root.right);
       
        if(Math.abs(lh-rh)>1)
            isBal=false;
        
        return Math.max(lh,rh)+1;
    }
}
