Q. Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Approach1: T(n)= O(n*height);
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        
        if(root==null)
            return 0;
        int maxD=Math.max(diameterOfBinaryTree(root.left),diameterOfBinaryTree(root.right));
        
        return Math.max(height(root.left)+height(root.right), maxD);
    }
    
    int height(TreeNode root){
        
        if(root==null)
            return 0;
        return Math.max(height(root.left),height(root.right))+1;
    }
}

Approach 2: T(n)=O(n)

class Solution {
    
    class Pair{
         int height;
         int diameter;
    }
    public int diameterOfBinaryTree(TreeNode root) {
        
        if(root==null)
            return 0;
         return solve(root).diameter;   
    }
    
    Pair solve(TreeNode root){
        if(root==null){
            Pair node=new Pair();
            node.height=0;
            node.diameter=0;
            return node;
        }
        Pair leftAns=solve(root.left);
        Pair rightAns=solve(root.right);
        Pair node=new Pair();
        node.height=1+Math.max(leftAns.height,rightAns.height);
        int diameter=Math.max(leftAns.diameter,rightAns.diameter);
        node.diameter=Math.max(rightAns.height+leftAns.height,diameter); 
        return node;
        
    }
}
