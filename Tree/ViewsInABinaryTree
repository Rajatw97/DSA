Q. Top view of binary tree
 
 a) Recursive 
 
 Map<Integer,Integer> map=new TreeMap<>();

	public  ArrayList<Integer> getTopView(BinaryTreeNode root) {
	
		solve(root,0);
    ArrayList<Integer> result= new ArrayList<>();
    for(Integer it:map.keySet())
        result.add(map.get(it));
        
    return result ;
	}
	
	  void solve(BinaryTreeNode root, int level){
        
        if(root==null)
            return;
       
       if(!map.containsKey(level))
		   map.put(level, root.val);
        
        solve(root.left,level-1);
        solve(root.right,level+1);
        
    }
   
 b) Iterative 
   
 class Pair{
        int level;
        Node node;
        
        Pair(Node node, int level){
            this.level=level;
            this.node=node;
        }
   }
   
   static ArrayList<Integer> topView(Node root)
    {
        ArrayList<Integer> ans = new ArrayList<>(); 
        if(root == null) return ans;
        Map<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(root, 0)); 
        while(!q.isEmpty()) {
            Pair it = q.remove();
            int level = it.level; 
            Node temp = it.node; 
            if(map.get(level) == null)
              map.put(level, temp.data); 
            if(temp.left != null) 
                q.add(new Pair(temp.left, level - 1));  
            if(temp.right != null) 
                q.add(new Pair(temp.right, level + 1)); 
            
        }
    
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            ans.add(entry.getValue()); 
        }
        return ans; 
        
    }
    
      public ArrayList <Integer> bottomView(Node root)
    {
         ArrayList<Integer> ans = new ArrayList<>(); 
        if(root == null) return ans;
        Map<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(root, 0)); 
        while(!q.isEmpty()) {
            Pair it = q.remove();
            int level = it.level; 
            Node temp = it.node;
              map.put(level, temp.data); 
            if(temp.left != null) 
                q.add(new Pair(temp.left, level - 1));  
            if(temp.right != null) 
                q.add(new Pair(temp.right, level + 1)); 
            
        }
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            ans.add(entry.getValue()); 
        }
        return ans; 
        
    }
    
    
    class Solution {
    
          ArrayList<Integer> list=new ArrayList<>();
          boolean[] visited=new boolean[1001];

          public List<Integer> rightSideView(TreeNode root) {
              return rightViewList(root,0);
          }
    
         ArrayList<Integer> rightViewList(TreeNode root, int level){
               if(root==null)
                  return list;
              if(!visited[level])
              {
                  visited[level]=true;
                  list.add(root.val);
              }
              rightViewList(root.right,level+1);
              rightViewList(root.left,level+1);

              return list;
           }
    }
    
     class Solution {
    
          ArrayList<Integer> list=new ArrayList<>();
          boolean[] visited=new boolean[1001];

          public List<Integer> rightSideView(TreeNode root) {
              return rightViewList(root,0);
          }
    
         ArrayList<Integer> rightViewList(TreeNode root, int level){
               if(root==null)
                  return list;
              if(!visited[level])
              {
                  visited[level]=true;
                  list.add(root.val);
              }
              rightViewList(root.left,level+1);
              rightViewList(root.right,level+1);
             

              return list;
           }
    }
    
    
    
   
   
