Q. Return inorder traversal of binary tree without recursion. 
Input: root = [1,null,2,3]
Output: [1,3,2]
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    
    List<Integer> list=new ArrayList<>();
    
    public List<Integer> inorderTraversalRecursive(TreeNode root) {
        
        if(root==null)
            return list;
        inorderTraversalRecursive(root.left);
        list.add(root.val);
        inorderTraversalRecursive(root.right);
      
        return list;
    }

    public List<Integer> inorderTraversalIterative(TreeNode root) {
        
        TreeNode curr=root;
        Stack<TreeNode> stack=new Stack<>();
        List<Integer> list=new ArrayList<>();
        
        while(curr!=null || !stack.isEmpty())
        {
            while(curr != null){
                stack.push(curr);
                curr=curr.left;
            }

                curr=stack.pop();
                list.add(curr.val);
                curr=curr.right;    
        }
        return list;
    }      
}
