Q> Given a string s which represents an expression, evaluate this expression and return its value. The integer division should truncate toward zero.
You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].
Input: s = " 3+5 / 2 "
Output: 5

TC: O(n)
 public static int calculate(String s) {

    Stack<Integer> st = new Stack<>();
    int val = 0;
    char sign = '+';
    for (int i = 0; i < s.length(); i++) {
      char ch = s.charAt(i);

      if (Character.isDigit(ch)) {
        val = val * 10 + (ch - '0');
      }
      if (i + 1 == s.length() || ch == '+' || ch == '-' || ch == '*' || ch == '/') {
        if (sign == '+') {
          st.push(val);
        } else if (sign == '-') {
          st.push(-val);
        } else if (sign == '*') {
          st.push(st.pop()*val);
        } else if (sign == '/') {
          st.push(st.pop() / val);
        }
        val = 0;
        sign = ch;
      }
    }

    int sum = 0;
    while (st.size() > 0) {
      sum += st.pop();
    }

    return sum;
  }

Variation: Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.
Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
TC: O(n), where n is the length of the string
SC: O(number of brackets)

 public static int calculate(String s) {
        int len = s.length();
        int sign = 1;
        int ans = 0;
        int currNo = 0;
        Stack<Integer> stack = new Stack<Integer>();
        for (int i = 0; i < len; i++) {
            if (Character.isDigit(s.charAt(i))) {
                currNo = s.charAt(i) - '0';
                while (i + 1 < len && Character.isDigit(s.charAt(i + 1))) {
                    currNo = currNo * 10 + s.charAt(i + 1) - '0';
                    i++;
                }
                currNo = currNo * sign;
                ans += currNo;
                currNo = 0;
                sign = 1;
            } else if (s.charAt(i) == '+')
                sign = 1;
            else if (s.charAt(i) == '-')
                sign = -1; //  -1 respresents negative sign
            else if (s.charAt(i) == '(') {
                stack.push(ans); // store the result calculated so far
                stack.push(sign); // store the upcoming sign
                ans = 0;
                sign = 1;
            } else if (s.charAt(i) == ')') {
                int prevSign = stack.pop();
                ans = prevSign* ans ;
                int prevAns = stack.pop();
                ans = ans + prevAns;
            }

        }
        return ans;
    }
