Q> Given an array of strings words and an integer k, return the k most frequent strings.
   Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.
   
    Tip: If the input array is very large then go for quick select else go for minHeap approach.
   
   TC:O(NlogK)
   public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> wordCounts = new HashMap<>();
        for(String word : words) wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);
        PriorityQueue<String> minHeap = new PriorityQueue<>((s1, s2) -> { wordCounts.get(s1)==wordCounts.get(s2)? s2.compareTo(s1):wordCounts.get(s1)-wordCounts.get(s2)});  
        for(String word : wordCounts.keySet()) {
            minHeap.offer(word);
            if(minHeap.size() > k) minHeap.poll(); 
        }
        LinkedList<String> toReturn = new LinkedList<>();
        while(!minHeap.isEmpty()) toReturn.addFirst(minHeap.poll());
        
        return toReturn;
    }

 TC: O(n log n)
 public List<String> topKFrequent(String[] words, int k) {
        TreeMap<String, Integer> map = new TreeMap<>(String::compareTo);
        Arrays.stream(words).forEach(x -> map.put(x, map.getOrDefault(x, 0) + 1));
        return map.entrySet().stream()
            .sorted((o1, o2) -> Integer.compare(o2.getValue(), o1.getValue()))
            .map(Map.Entry::getKey)
            .limit(k)
            .collect(Collectors.toList());
    }
    
    TC: Avg: O(n), Worst: n2 (if the pivot chosen in each iteration is the maximum or minimum element)
    class Solution {
    public List<String> topKFrequent(String[] words, int k) {
           return quickSelect(words, k);
    	}
    
    private List<String> quickSelect(String[] words, int k ){
        Map<String, Integer> map = new HashMap<>();
    	  for(String w:  words)
    		map.put(w, map.getOrDefault(w, 0 )+1);
        String[] arr = map.keySet().toArray(new String[map.size()]);    
        int s = 0, e = arr.length-1;
        while(s <= e){ 
            int  mid = partition(arr, s, e, map);
            if(mid==k-1)
                break;
            else if(mid >= k)
                e = mid-1;
            else
                s = mid + 1;
        }
        Arrays.sort(arr, 0, k, (a,b) -> { 
            int x = map.get(b) - map.get(a);
    		    if(x == 0)
    			  return a.compareTo(b);
    		    return x;
        });
        List<String> res = new ArrayList<>();
        for(int i = 0; i<k; i++)
            res.add(arr[i]);
        return res;
    }
   
    private int partition(String[] arr, int l, int h,Map<String,Integer> map ){
        
        int i = l-1;
        String pivot = arr[h];
        for(int j = l; j < h; j++){ 
            if(map.get(arr[j]) > map.get(pivot)){
                i++;
                swap(arr, i, j);
            } else if(map.get(arr[j]) == map.get(pivot) && arr[j].compareTo(pivot) < 0){
                i++;
                swap(arr, i, j);
            }   
        }
        i++;
        swap(arr,i, h);
        return i;
    }
    private void swap(String[] arr, int i, int j){
        String temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }    
}
    
