Q. You are given an array of integers stones where stones[i] is the weight of the ith stone. On each turn, we choose the heaviest two stones and smash them together.
Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.
Return the smallest possible weight of the left stone. If there are no stones left, return 0.

Input: stones = [2,7,4,1,8,1]
Output: 1

Approach: In Java use priority queue to build heap.

class Solution {
    public int lastStoneWeight(int[] stones) {
        
        int n=stones.length;
        
        Queue<Integer> pqueue = new PriorityQueue<>(new Comparator<Integer>() {
        @Override
        public int compare(Integer o1, Integer o2) {
            return o1 < o2 ? 1 : -1;
        }});
        
        for(int i=0; i < n; i++)
            pqueue.add(stones[i]);
        
        while(n > 1){
            
            int first= pqueue.poll();
            int second=pqueue.poll();
            n-=2;
            if(first-second>0)
            {
                pqueue.add(first-second);
                n+=1;
            }
        }

        return pqueue.isEmpty() ? 0 :pqueue.poll();
    }
}
