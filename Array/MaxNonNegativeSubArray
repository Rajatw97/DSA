// Variation of Kadane's Algorithm
// Q. Find out the maximum sum sub-array of non negative numbers from A. Conditions:
// 1. If there is a tie, then compare with segment's length and return segment which has maximum length.
// 2.If there is still a tie, then return the segment with minimum starting index.

import java.util.*;
public class Solution {

    public ArrayList<Integer> maxset(ArrayList<Integer> A) {
        ArrayList<Integer> list=new ArrayList<>();
        int left=0,right=0,leftindex=-1,rightindex=-1;
        long sum=0,result=0;
        for(int i=0;i<A.size();i++){

            if(A.get(i)>=0){
                sum+=A.get(i);
                if(sum>result || (sum==result && rightindex-leftindex<=right-left)){   
                    result=sum;
                    leftindex=left;
                    rightindex=right;
                }
            }
            else{
                sum=0;
                left=i+1;
            }
            right+=1;
        }
        if(leftindex==-1) return list;
        for(int i=leftindex;i<=rightindex;i++)   
            list.add(A.get(i));
        
        return list;
}

}
