Q>You are given a notice board with length n.
You need to write 2 funtions.
1. add_notice(left, right): in this function, you need to add a notice to the notice board in the co-ordinates given as input.
                            New notice can partially or completely overlap previous notice on the board.
                            The user will call this method multiple times and add different notices on the board at various places.
2. get_visible_notices(): After all the notices are applied, using the above method, the user will call this method to get all the notices which will be visible at the end.
                          Here, you need to return fully exposed as well as partially exposed notices.

eg. if the user gives us notices like this: (5,15), (16, 18), (12, 20) -> then, the second notice(16,18) will be overlapped by the third notice (12,20) and thus, it will not be visible.
and first notice will be partially overlapped. Thus, we should return 2 as an answer

import java.util.ArrayList;
import java.util.List;

public class NoticeBoard {
    private List<int[]> intervals;

    public NoticeBoard() {
        intervals = new ArrayList<>();
    }

    public void add_notice(int left, int right) {
        boolean merged = false;
        for (int i = 0; i < intervals.size(); i++) {
            if (left > intervals.get(i)[1]) {  // If new notice is completely to the right
                continue;
            }
            if (right < intervals.get(i)[0]) {  // If new notice is completely to the left
                intervals.add(i, new int[]{left, right});
                merged = true;
                break;
            }
            // If new notice partially overlaps with current interval, merge them
            left = Math.min(left, intervals.get(i)[0]);
            right = Math.max(right, intervals.get(i)[1]);
            intervals.set(i, new int[]{left, right});
            merged = true;
            break;
        }

        if (!merged) {
            intervals.add(new int[]{left, right});
        }
    }

    public int get_visible_notices() {
        int maxRight = Integer.MIN_VALUE;
        int visibleNotices = 0;
        for (int[] interval : intervals) {
            if (interval[0] > maxRight) {  // If notice is completely to the right
                visibleNotices++;
                maxRight = interval[1];
            } else {
                maxRight = Math.max(maxRight, interval[1]);  // Update max right coordinate
            }
        }

        return visibleNotices;
    }
}
