Q.) A brave Knight "A" has an array of monsters to face, and will use a combination of might and magic to defeat as many as possible.
	  In this challenge we'd like  to know if the knight is successful at defeating them all, and if not, how many monsters are defeated.
    
    public class KnightDefeatMonsters {
    public static String countDefeatedMonsters(int[] monsters, int knightStrengthMight, int knightStrengthMagic) {
        int totalStrength = knightStrengthMight + knightStrengthMagic; // Calculate combined strength
        int defeatedCount = 0;
        for (int monsterStrength : monsters) {
            if (totalStrength >= monsterStrength) {
                defeatedCount++;
            }
        }
        if (defeatedCount == monsters.length) {
            return "Knight defeated all monsters";
        } else {
            return "Knight defeated " + defeatedCount + " monsters";
        }
    }

    public static void main(String[] args) {
        int[] monsters = {10, 20, 30, 40}; // Example array of monsters' strengths
        int knightStrengthMight = 25; // Example knight's might strength
        int knightStrengthMagic = 15; // Example knight's magic strength

        String result = countDefeatedMonsters(monsters, knightStrengthMight, knightStrengthMagic);
        System.out.println(result);
    }
 }
 
 Q: A can see the monsters and their order ahead of time.  Despite being evil monsters they will politely queue and challenge A in the current order.  
	   Knowing this, A can plan what to do so that it is optimal.
		* The first monster will always be defeated by A's squires while A prepares for battle
		* For each other monster there are two possibilities :

		1) If the current monster is weaker than the previous one (i.e. enemies[curr] < enemies[curr-1]), The enemy surrenders - what goblin would 
		face someone who has just defeated a dragon?
		2) If the current monster is stronger than the previous one (i.e. enemies[curr] > enemies[curr-1]), then A has two options :
			2.1) Might!  A fights the monster taking damage (reducing hitpoints by the difference between the current and the previous monster).
			2.2) Magic!  A can drink an invulnerability potion, defeating the monster without taking damage.

		Write a function that takes as initial parameters

		* A list of monsters in order of how A will face them, with their strength as values;
		* A’s initial hit points;
		* A’s amount of invulnerability potions.
	
		And returns

		* The 0-based index of the last monster A defeated

		Constraints:

		* 0 <= enemies.length <= 10e6
		* 1 <= enemies[i] <= 10e4
		* 1 <= hp <= 10e5
		* 0 <= potions <= 10e4

public class KnightDefeatMonsters {
    public static int lastDefeatedMonsterIndex(int[] enemies, int hp, int potions) {
        int lastDefeated = 0; // Initialize the last defeated monster index as 0
        int prevStrength = 0; // Initialize the previous monster's strength as 0

        // Loop through the monsters starting from index 1, as the first monster will always be defeated by squires
        for (int i = 1; i < enemies.length; i++) {
            // If the current monster is weaker than the previous one, the enemy surrenders, no action needed
            if (enemies[i] < enemies[i - 1]) {
                lastDefeated = i; // Update the last defeated monster index
            }
            // If the current monster is stronger than the previous one, Knight "A" has two options
            else {
                // Option 1: Use might, reduce HP by the difference in strength and continue
                if (enemies[i] - enemies[i - 1] <= hp) {
                    hp -= enemies[i] - enemies[i - 1];
                }
                // Option 2: Use magic, defeat the monster without taking damage
                else if (potions > 0) {
                    potions--;
                }
                // If no options left, Knight "A" cannot defeat the current monster and break out of the loop
                else {
                    break;
                }
                lastDefeated = i; // Update the last defeated monster index
            }
        }

        return lastDefeated;
    }

    public static void main(String[] args) {
        int[] enemies = {10, 8, 12, 15, 20}; // Example array of monsters' strengths
        int hp = 30; // Example knight's initial hit points
        int potions = 2; // Example knight's initial invulnerability potions

        int result = lastDefeatedMonsterIndex(enemies, hp, potions);
        System.out.println("The last defeated monster index is: " + result);
    }
}
