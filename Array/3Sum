Q. Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
   Notice that the solution set must not contain duplicate triplets.


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        if(nums.length<3)
            return new ArrayList();
        
        Set<List<Integer>> result=new HashSet<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length-2;i++)
        {
            int start=i+1;
            int end=nums.length-1;
            while(start<end)
            {
                int sum=nums[i]+nums[start]+nums[end];
                if(sum==0)
                    result.add(Arrays.asList(nums[i],nums[start++],nums[end--]));
                else if(sum>0)
                    end--;
                else
                    start++;
            }
        }
        return result.stream().collect(Collectors.toList());
    }
}
