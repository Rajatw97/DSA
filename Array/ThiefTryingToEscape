Q. A thief trying to escape from a jail has to cross N walls whose heightd are given in arr[] each with varying heights.
He climbs X feet every time. But, due to the slippery nature of those walls, every times he slips back by Y feet.
Now the task is to calculate the total number of jumps required to cross all walls and escape from the jail.

Input: X = 4, Y = 1, N = 5
arr = {6, 9, 11, 4, 5}
Output: 12

class Solution{
    static int totalJumps(int X, int Y, int N, int arr[])
    {
        // code here
        int max=Integer.MIN_VALUE;
        int count=0;
        for(int i=0;i<N;i++){
           
            if(arr[i]<=X)
            {  count++;
               continue;
            }
            int ht=arr[i];
            while(ht>X){
                count++;
                ht=ht- (X-Y);
    
            }
            count++;
        }
        return count;
    }
}

Efficient:

static int jumpcount(int x, int y, int n,
                                   int height[])
    {
        int jumps = 0;
        for (int i = 0; i < n; i++) {
      
            // Since all heights are
            // greater than 1, at-least
            // one jump is always required
            jumps++;
      
            // More jumps required if height
            // is greater than x.
            if (height[i] > x)
            {
               // Since we have already counted
               // one jump
               int h = height[i] - (x - y);
      
               // Remaining jumps
               jumps += h/(x - y);
      
               // If there was a remainder greater
               // than 1. 1 is there to handle cases
               // like x = 11, y = 1, height[i] = 21.
               if (h % (x-y) > 1)
                 jumps++;
            }
        }
        return jumps;
    }
