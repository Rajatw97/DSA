Q> Given a list of [FileName, FileSize, [Collection]] - Collection is optional, i.e., a collection can have 1 or more files. Same file can be a part of more than 1 collection.
How would you design a system
To calculate total size of files processed.
To calculate Top K collections based on size.
Example:
file1.txt(size: 100)
file2.txt(size: 200) in collection "collection1"
file3.txt(size: 200) in collection "collection1"
file4.txt(size: 300) in collection "collection2"
file5.txt(size: 100)
Output:
Total size of files processed: 900
Top 2 collections:
- collection1 : 400
- collection2 : 300


class File {
int size;

File(int size) {
    this.size = size;
}

public int getSize(){
    return this.size;
}
}

class Collection {

public String name;
public int totalSize;
private List<File> files;

Collection(String n) {
    this.name = n;
    this.totalSize = 0;
    files = new ArrayList<>();
}

public void addFile(File file){
    files.add(file);
    this.totalSize = this.totalSize + file.getSize();     
}
}

public class FileUtility {

public int totalSizeProcessed = 0;

public HashMap<String,Collection> map = new HashMap<>();
public PriorityQueue<Collection> queue = new PriorityQueue<Collection>((a,b)->{
    return b.totalSize - a.totalSize;
});

public void getTotalSize() {
    System.out.println("Total size of files processed: "+totalSizeProcessed);
}
//TC: O(KlogN)
public void getTop(int N) {
    
    List<String> topN = new ArrayList<>();
    List<Collection> list = new ArrayList<>();
    System.out.println("Top "+N+" Collections:");
    
    while(N>0 && queue.size()>0) {
        Collection poll = queue.poll();
        if(!poll.name.equalsIgnoreCase("root")) {
            System.out.println("- "+poll.name+" "+poll.totalSize);
            N--;
        }
        list.add(poll);
    }
    
    queue.addAll(list);
    
}
 // TC: O(log n)
 public void saveFiletoCollection(String collectionName,int fileSize) {
 
    if(Objects.isNull(collectionName)) 
        collectionName = "root";
        
    Collection collection;
    if(map.containsKey(collectionName)) {
        collection = map.get(collectionName);
        queue.remove(collection);
    } else {
         collection = new Collection(collectionName);
    }  
     totalSizeProcessed = totalSizeProcessed + fileSize;
     collection.addFile(new File(fileSize));
     queue.add(collection);
     map.put(collectionName,collection);
  }


public static void main(String[] args) {
    
    FileUtility  utility = new FileUtility();
    utility.saveFiletoCollection("collection1",200);
    utility.saveFiletoCollection("collection2",200);
    utility.saveFiletoCollection(null,200);
    
    utility.saveFiletoCollection("collection3",200);
    utility.saveFiletoCollection("collection3",200);
    utility.saveFiletoCollection("collection3",200);
    utility.saveFiletoCollection("collection2",100);
    utility.getTotalSize();
    utility.getTop(3);

  }
}

Additional Questions:

1) Handle nested collections

   File class- unchanged
   Class Collection {
   ...
   private Map<String, Collection> subCollections;
   
    public void addSubCollection(Collection collection) {
        subCollections.put(collection.name, collection);
        this.totalSize += collection.totalSize;
    }
   }
   
   public class FileUtility {
   ...
   // TC:O(h + s log N + log N), where h is the height of the collection tree  s is the number of subcollections and N is the size of the priority queue
    public void saveFiletoCollection(String collectionName, int fileSize) {
        if (collectionName == null || collectionName.isEmpty()) {
            collectionName = "root";
        }

        Collection collection = map.get(collectionName);

        if (collection == null) {
            collection = new Collection(collectionName);
            map.put(collectionName, collection);
        }

        totalSizeProcessed += fileSize;
        collection.addFile(new File(fileSize));

        // Recursively update subcollections
        Collection currentCollection = collection;
        while (!currentCollection.name.equalsIgnoreCase("root")) {
            Collection parentCollection = map.get(currentCollection.name);
            if (parentCollection != null) {
                parentCollection.totalSize += fileSize;
                currentCollection = parentCollection;
            } else {
                break;
            }
        }

        // Update subcollections
        for (Collection subCollection : collection.getSubCollections()) {
            subCollection.totalSize += fileSize;
            queue.remove(subCollection);
            queue.offer(subCollection);
        }

        // Update current collection
        queue.remove(collection);
        queue.offer(collection);
    }
   }
   
