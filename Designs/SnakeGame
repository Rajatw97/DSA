Q>Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.
The snake is initially positioned at the top left corner (0,0) with length = 1 unit.
You are given a list of food's positions in row-column order. When a snake eats the food, its length and the game's score both increase by 1.
Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.
When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.

TC:O(1)

import java.util.*;
public class Main {
    private int width;
    private int height;
    private int[][] board;
    private int score;
    private Deque<int[]> snake;  // Using Deque to represent the snake
    private Queue<int[]> food;   // Using Queue to represent the food
    
    public Main(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.board = new int[height][width];
        this.score = 0;
        this.snake = new LinkedList<>();
        this.snake.offerFirst(new int[]{0, 0});  // Add head of snake to the front
        this.board[0][0] = 1;
        this.food = new LinkedList<>(Arrays.asList(food));  // Convert food array to queue
    }
    
    public int move(String direction) {
        int[] head = snake.peekFirst();
        int row = head[0];
        int col = head[1]; 
        switch (direction) {
            case "U":
                row--;
                break;
            case "D":
                row++;
                break;
            case "L":
                col--;
                break;
            case "R":
                col++;
                break;
        }
        if (!isValid(row, col)) {
            return -1;
        }
        return process(row, col);
    }
  
    public boolean isValid(int row, int col) {
        // Check if snake hits the boundary or collides with itself
        if (row < 0 || row >= height || col < 0 || col >= width || board[row][col] == 1) {
            return false;
        }
        return true;    
    }
  
    public int process(int row, int col) {
        // Check if snake eats the food
        if (!food.isEmpty() && row == food.peek()[0] && col == food.peek()[1]) {
            snake.offerFirst(new int[]{row, col});  // Add food to the front
            board[row][col] = 1;
            score++;
            food.poll();  // Remove the food from queue
        } else {
            int[] tail = snake.pollLast();  // Remove tail of snake
            board[tail[0]][tail[1]] = 0;
            snake.offerFirst(new int[]{row, col});  // Add head of snake to the front
            board[row][col] = 1;
        }
        return score;
    }
    
   public static void main(String[] args) {
    int width = 3;
    int height = 2;
    int[][] food = {{1,2}, {0,1}};

    Main snake = new Main(width, height, food);

    System.out.println("Initial state:");
  

    System.out.println("Move Right:");
    System.out.println("Score: " + snake.move("R"));
    

    System.out.println("Move Down:");
    System.out.println("Score: " + snake.move("D"));
   

    System.out.println("Move Right:");
    System.out.println("Score: " + snake.move("R"));
    

    System.out.println("Move Up:");
    System.out.println("Score: " + snake.move("U"));
   

    System.out.println("Move Left:");
    System.out.println("Score: " + snake.move("L"));
    

    System.out.println("Move Up:");
    System.out.println("Score: " + snake.move("U"));
    
  }
}  

  
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class SnakeTest {

    @Test
    public void testSnakeGame() {
        int width = 3;
        int height = 2;
        int[][] food = {{1, 2}, {0, 1}};
        Snake snake = new Snake(width, height, food);

        assertEquals(0, snake.move("R"));
        assertEquals(0, snake.move("D"));
        assertEquals(1, snake.move("R"));
        assertEquals(1, snake.move("U"));
        assertEquals(2, snake.move("L"));
        assertEquals(-1, snake.move("U"));
    }
}

Additional questions: 

1)If snake goes out of the boundary it should wrap in from the opposite side of the screen.
    a) Remove boundary check from isValid()
    b) Before calling isValid() in move() on line 46, modulo the coordinates:
        row = (row + height) % height; // wrap around the row
        col = (col + width) % width; // wrap around the column
2) How would you take care of concurrent button presses, i.e if someone presses up and right at the same time ?
    a) If you dont want to process multiple direction, then use locks.
    b) If you are ok with receiving multiple requests and want to process them then store the incoming dirn request in a queue and process from queue req by req.

    public class SnakeGame {
        ...
        private Queue<String> inputQueue; // Thread-safe queue to store user input

    public SnakeGame(int width, int height, int[][] food) {
        ...
        this.inputQueue = new ConcurrentLinkedQueue<>();
    }

    public synchronized void move(String direction) {
        inputQueue.offer(direction); // Add the direction to the input queue
    }

    private boolean isValid(int row, int col) {... } // unchanged

    private int process(int row, int col) {... } // unchanged

    private void handleInput() {
        while (true) {
            String direction = inputQueue.poll(); // Poll the input queue
            if (direction != null) {
                int[] head = snake.peekFirst();
                int row = head[0];
                int col = head[1];
                switch (direction) {
                    case "U":
                        row--;
                        break;
                    case "D":
                        row++;
                        break;
                    case "L":
                        col--;
                        break;
                    case "R":
                        col++;
                        break;
                }
                if (isValid(row, col)) {
                    process(row, col);
                }
            }
        }
    }

    public static void main(String[] args) {
        int width = 3;
        int height = 2;
        int[][] food = {{1, 2}, {0, 1}};

        SnakeGame snake = new SnakeGame(width, height, food);

        // Start the input handling thread
        Thread inputThread = new Thread(snake::handleInput);
        inputThread.start();

        // Simulate user input by calling move()
        snake.move("R");
        snake.move("D");
        snake.move("R");
        snake.move("U");
        snake.move("L");
       / Wait for the input thread to finish
        try {
            inputThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
}

 


