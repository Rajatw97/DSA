Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last
10 seconds.Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.
 It is possible that several messages arrive roughly at the same time.

Example:

Logger logger = new Logger();

// logging string "foo" at timestamp 1
logger.shouldPrintMessage(1, "foo"); returns true; 

// logging string "bar" at timestamp 2
logger.shouldPrintMessage(2,"bar"); returns true;

// logging string "foo" at timestamp 3
logger.shouldPrintMessage(3,"foo"); returns false;

// logging string "bar" at timestamp 8
logger.shouldPrintMessage(8,"bar"); returns false;

// logging string "foo" at timestamp 10
logger.shouldPrintMessage(10,"foo"); returns false;

// logging string "foo" at timestamp 11
logger.shouldPrintMessage(11,"foo"); returns true;

// It would pass the leetcode, however, there are concerns on the capacity, thinking of it as a cache, then certain eviction policy needed to remove obsolete record
// to avoid exploding the data structure in memory.
class Logger {
  private HashMap<String, Integer> logs;

  public Logger() {
    logs = new HashMap<String, Integer>();
  }

  public boolean shouldPrintMessage(int timestamp, String message) {
    if (logs.containsKey(message)) {
            if (timestamp - logs.get(message) >= 10) {
                logs.put(message, timestamp);
                return true;
            } else {
                return false;
            }
        } else {
            logs.put(message, timestamp);
        }
        return true;
    }
}

Alternate solution:

import javafx.util.Pair;
 
class Logger {
 
    private Set<string> visited;
    private Queue<pair <Integer, String>> logs; 
  
    public Logger() {
       visited = new HashSet<>();
       logs = new LinkedList<>();
    }
    
    public boolean shouldPrintMessage(int timestamp, String message) {
        // remove invalid entries
        while (!logs.isEmpty()) {
            Pair<Integer , String> pair = logs.peek();
            if (timestamp - pair.getKey() >= 10) {
                logs.poll();
                visited.remove(pair.getValue()); // remove from hash set
            } else {
                break;
            }
        }   
        if (visited.contains(message)) {
            return false; //  printed in last 10 seconds
        }
        // inserting the entry
        visited.add(message);
        logs.add(new Pair(timestamp, message));
        return true;        
    }
    
   
}
